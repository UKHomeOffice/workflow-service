---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.WORKFLOW_SERVICE_NAME}}
spec:
  selector:
    matchLabels:
      name: {{.WORKFLOW_SERVICE_NAME}}
  replicas: 1
  revisionHistoryLimit: 3
  template:
    metadata:
      labels:
        name: {{.WORKFLOW_SERVICE_NAME}}
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: {{.WORKFLOW_SERVICE_NAME}}
        image: {{.WORKFLOW_SERVICE_IMAGE}}:{{.WORKFLOW_SERVICE_TAG}}
        command: ["/bin/sh"]
        args: ["-c", "/app/run.sh -Djava.security.egd=file:/dev/./urandom -Djavax.net.ssl.keyStore=/etc/keystore/keystore.p12 -Djavax.net.ssl.keyStorePassword=changeit  -Djavax.net.ssl.trustStore=/etc/keystore/cacerts -Djavax.net.ssl.trustStoreType=pkcs12 -Djavax.net.ssl.trustStorePassword=changeit -jar /app/workflow-service.jar"]
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        resources:
          requests:
            memory: "6144Mi"
            cpu: "4000m"
          limits:
            memory: "6144Mi"
            cpu: "4000m"
        ports:
          - name: https
            containerPort: 8443
        readinessProbe:
          httpGet:
            path: /camunda/engine
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 20
        livenessProbe:
          httpGet:
            path: /camunda/actuator/health
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 20
        volumeMounts:
          - name: certs
            mountPath: /certs
            readOnly: true
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: "{{.SPRING_PROFILES_ACTIVE}}"
          - name: AWS_REGION
            value: "{{.AWS_REGION}}"
          - name: AWS_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{.WORKFLOW_SERVICE_NAME}}
                key: awsAccessKeyId
          - name: AWS_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{.WORKFLOW_SERVICE_NAME}}
                key: awsSecretAccessKey
          - name: AWS_SECRETS_MANAGER_ENABLED
            value: "{{.AWS_SECRETS_MANAGER_ENABLED}}"
          - name: APP_NAME
            value: "{{.APP_NAME}}"
      volumes:
      - name: certs
        secret:
          secretName: "{{.WORKFLOW_SERVICE_NAME}}-pod-cmio"
